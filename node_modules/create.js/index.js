var utils = require('./lib/utils');
var of = require('of');
var classes = require('clas');

var tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'shadow', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr'];

var create = {};
create.registry = [];

tags.forEach(function(tag) {
	create[tag] = function(options) {
		var content;
		if (!of.object(options)) {
			content = options;
			options = {};
		}
		options = options || {};
		var element = document.createElement(tag);
		var context = options.context || {};
		var escape = options.escape || true;
		var classes = options.classes || '';
		content = options.content || null;
		var appendTo = options.appendTo || null;
		var frag;
		
		delete options.context;
		delete options.escape;
		delete options.classes;
		delete options.content;
		delete options.appendTo;

		if (classes) {
			utils.add(element, classes);
		}

		if (content) {
			if (of.element(content)) {
				element.appendChild(content);
			} else

			if (of.string(content)) {
				element.innerHTML = content;
			} else

			if (of['function'](content)) {
				children = content.call(null, context);
				element.appendChild(children);
			} else

			if (of.array(content)) {

				for (var i = 0, l = content.length; i < l; i++) {
					var arg = content[i];
					if (of.element(arg)) {
						element.appendChild(arg);
					} else if (of.string(arg)) {
						frag = create.fragment();
						frag.innerHTML = arg;
						element.appendChild(frag);
					} else if (of['function'](arg)) {
						var child = arg.call();
						if (of.element(child)) {
							element.appendChild(child);
						}
					}
				}

			}

		}

		utils.add(element, options);

		if (appendTo) {
			if (of.element(appendTo)) appendTo.appendChild(element);
		}

		return element;
	};
});

create.fragment = function() {
	if (!arguments.length) return document.createDocumentFragment();
};

create.list = function(array, fn) {
	var fragment = create.fragment();
	for (var i = 0, l = array.length; i < l; i++) {
		var ctx = {};
		ctx.list = array;
		ctx.current = array[i];
		ctx.index = i;
		var element = fn.call(ctx, ctx.current);
		fragment.appendChild(element);
	}
	return fragment;
};

create.component = function(elements, options, data) {

}

module.exports = create;