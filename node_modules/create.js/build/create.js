!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.create=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var utils = require('./lib/utils');
var of = require('of');
var classes = require('clas');

var tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'shadow', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr'];

var create = {};
create.registry = [];

tags.forEach(function(tag) {
	create[tag] = function(options) {
		var content;
		if (!of.object(options)) {
			content = options;
			options = {};
		}
		options = options || {};
		var element = document.createElement(tag);
		var context = options.context || {};
		var escape = options.escape || true;
		var classes = options.classes || '';
		content = options.content || null;
		var appendTo = options.appendTo || null;
		var frag;
		
		delete options.context;
		delete options.escape;
		delete options.classes;
		delete options.content;
		delete options.appendTo;

		if (classes) {
			utils.add(element, classes);
		}

		if (content) {
			if (of.element(content)) {
				element.appendChild(content);
			} else

			if (of.string(content)) {
				element.innerHTML = content;
			} else

			if (of['function'](content)) {
				children = content.call(null, context);
				element.appendChild(children);
			} else

			if (of.array(content)) {

				for (var i = 0, l = content.length; i < l; i++) {
					var arg = content[i];
					if (of.element(arg)) {
						element.appendChild(arg);
					} else if (of.string(arg)) {
						frag = create.fragment();
						frag.innerHTML = arg;
						element.appendChild(frag);
					} else if (of['function'](arg)) {
						var child = arg.call();
						if (of.element(child)) {
							element.appendChild(child);
						}
					}
				}

			}

		}

		utils.add(element, options);

		if (appendTo) {
			if (of.element(appendTo)) appendTo.appendChild(element);
		}

		return element;
	};
});

create.fragment = function() {
	if (!arguments.length) return document.createDocumentFragment();
};

create.list = function(array, fn) {
	var fragment = create.fragment();
	for (var i = 0, l = array.length; i < l; i++) {
		var ctx = {};
		ctx.list = array;
		ctx.current = array[i];
		ctx.index = i;
		var element = fn.call(ctx, ctx.current);
		fragment.appendChild(element);
	}
	return fragment;
};

create.component = function(elements, options, data) {

}

module.exports = create;
},{"./lib/utils":2,"clas":3,"of":4}],2:[function(require,module,exports){
var of = require('of');
var classes = require('clas');
var utils = {};

utils.index = function(list, item) {
	return Array.prototype.indexOf.call(list, item);
};

utils.hasProp = function(obj, prop) {
	return obj !== null && Object.prototype.hasOwnProperty.call(obj, prop);
};

utils.add = function(element) {
	var args = Array.prototype.slice.call(arguments, 1);

	for (var i = 0, l = args.length; i < l; i++) {
		var arg = args[i];

		if (of.string(arg)) {
			classes.add(element, arg);
		} else

		if (of.array(arg)) {
			for (var a = 0, b = arg.length; a < b; a++) {
				classes.add(element, arg[a]);
			}
		} else

		if (of.object(arg)) {
			for (var property in arg) {
				if (property !== null && arg[property] !== undefined && utils.hasProp(arg, property)) {
					element.setAttribute(property, arg[property]);
				}
			}
		}
	}
	return element;
};

module.exports = utils;
},{"clas":3,"of":4}],3:[function(require,module,exports){
function indexOf(arr, item) {
	return Array.prototype.indexOf.call(arr, item);
}

var clas = {
	get : function(element) {
		return element.classList ? element.classList : element.className.split(/\s+/);
	},
	has : function(element, name) {
		return element.classList ? element.classList.contains(name) : !! ~indexOf(clas.get(element), name);
	},
	add : function(element, name) {
		if (element.classList) {
			element.classList.add(name);
			return element;
		}
		var classes = clas.get(element);
		name = name.trim();
		var index = indexOf(classes, name);
		if (!~index) {
			classes.push(name);
			element.className = classes.join(' ');
		}
		return element;
	},
	remove : function(element, name) {
		if (element.classList) {
			element.classList.remove(name);
			return element;
		}
		var classes = clas.get(element);
		name = name.trim();
		var index = indexOf(classes, name);
		if (~index) {
			classes.splice(index, 1);
			element.className = classes.join(' ');
		}
		return element;
	},
	toggle : function(element, name) {
		if (element.classList) {
			element.classList.toggle(name);
			return element;
		}
		name = name.trim();
		return clas.has(element, name) ? clas.remove(element, name) : clas.add(element, name);
	},
};

module.exports = clas;
},{}],4:[function(require,module,exports){
var of = {}, nodeTypes = [1, 3, 9, 11], types = ['String', 'RegExp', 'Array', 'Object', 'Function', 'Boolean', 'Number', 'Undefined', 'Arguments', 'Date', 'Null'];
of.type = {};
var toString = function(obj) { return Object.prototype.toString.call(obj); };
of.element = of.type.element = function(node) { return node.nodeName && (nodeTypes.indexOf(node.nodeType) > -1); };
types.forEach(function(type) {
	var name = type.toLowerCase();
	of[name] = of.type[name] = function(obj) {
		return toString(obj) === '[object ' + type + ']';
	};
});
module.exports = of;
},{}]},{},[1])(1)
});